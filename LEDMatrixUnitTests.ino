#ifdef RUN_UNIT_TESTS

const uint16_t LED_TEST_SET[] = {349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
const uint16_t BLOCK_TEST_SETS[blocksPerRow * ledsRowCount][maxLedsPerBlock] = {{349, 348, 347, 346, 345, -1}, {344, 343, 342, 341, 340, 339}, {338, 337, 336, 335, 334, -1}, {333, 332, 331, 330, 329, 328}, {327, 326, 325, 324, 323, 322}, {321, 320, 319, 318, 317, 316}, {315, 314, 313, 312, 311, 310}, {309, 308, 307, 306, 305, 304}, {303, 302, 301, 300, 299, 298}, {297, 296, 295, 294, 293, 292}, {291, 290, 289, 288, 287, 286}, {285, 284, 283, 282, 281, 280}, {210, 211, 212, 213, 214, -1}, {215, 216, 217, 218, 219, 220}, {221, 222, 223, 224, 225, -1}, {226, 227, 228, 229, 230, 231}, {232, 233, 234, 235, 236, 237}, {238, 239, 240, 241, 242, 243}, {244, 245, 246, 247, 248, 249}, {250, 251, 252, 253, 254, 255}, {256, 257, 258, 259, 260, 261}, {262, 263, 264, 265, 266, 267}, {268, 269, 270, 271, 272, 273}, {274, 275, 276, 277, 278, 279}, {209, 208, 207, 206, 205, -1}, {204, 203, 202, 201, 200, 199}, {198, 197, 196, 195, 194, -1}, {193, 192, 191, 190, 189, 188}, {187, 186, 185, 184, 183, 182}, {181, 180, 179, 178, 177, 176}, {175, 174, 173, 172, 171, 170}, {169, 168, 167, 166, 165, 164}, {163, 162, 161, 160, 159, 158}, {157, 156, 155, 154, 153, 152}, {151, 150, 149, 148, 147, 146}, {145, 144, 143, 142, 141, 140}, {70, 71, 72, 73, 74, -1}, {75, 76, 77, 78, 79, 80}, {81, 82, 83, 84, 85, -1}, {86, 87, 88, 89, 90, 91}, {92, 93, 94, 95, 96, 97}, {98, 99, 100, 101, 102, 103}, {104, 105, 106, 107, 108, 109}, {110, 111, 112, 113, 114, 115}, {116, 117, 118, 119, 120, 121}, {122, 123, 124, 125, 126, 127}, {128, 129, 130, 131, 132, 133}, {134, 135, 136, 137, 138, 139}, {69, 68, 67, 66, 65, -1}, {64, 63, 62, 61, 60, 59}, {58, 57, 56, 55, 54, -1}, {53, 52, 51, 50, 49, 48}, {47, 46, 45, 44, 43, 42}, {41, 40, 39, 38, 37, 36}, {35, 34, 33, 32, 31, 30}, {29, 28, 27, 26, 25, 24}, {23, 22, 21, 20, 19, 18}, {17, 16, 15, 14, 13, 12}, {11, 10, 9, 8, 7, 6}, {5, 4, 3, 2, 1, 0}}; 

void runUnitTests() {

  #ifdef RUN_LED_UNIT_TESTS 
    // Test the individual LED index calculation
    uint16_t testIdx = 0;
    uint16_t ledIdx = 0; 
    uint8_t failedCount = 0;
    for (uint16_t row = 0; row < ledsRowCount; row++) {
      for (uint16_t col = 0; col < ledsPerRow; col++) {        
        ledIdx = to_led_idx(row, col);
        if (!testEquality(LED_TEST_SET[testIdx], ledIdx)) {
          Serial.print("for (");
          Serial.print(row);
          Serial.print(", ");
          Serial.print(col);
          Serial.print(")");
          Serial.println();
          failedCount = failedCount + 1;
        }
        testIdx = testIdx + 1;
      }  
    }
    if (failedCount == 0) {
      Serial.println("All LED tests completed successfully.");
    }
  #endif 

  #ifdef RUN_BLOCK_UNIT_TESTS 
  // Test the glass block LED sets
  uint16_t testIdx = 0;
  uint8_t failedCount = 0;
  int* ledSet = new int[maxLedsPerBlock];
  for (uint16_t row = 0; row < ledsRowCount; row++) {
    for (uint16_t col = 0; col < blocksPerRow; col++) {
      to_led_idx_set(row, col, ledSet);
      for (int i = 0; i < maxLedsPerBlock; i++) {
        if (!testEquality(BLOCK_TEST_SETS[testIdx][i], ledSet[i])) {
          Serial.print("for (");
          Serial.print(row);
          Serial.print(", ");
          Serial.print(col);
          Serial.print(", ");
          Serial.print(i);
          Serial.print(")");
          Serial.println();
          failedCount = failedCount + 1;
        }
      }
      testIdx = testIdx + 1;
    }      
  }
  if (failedCount == 0) {
    Serial.println("All Glass Block tests completed successfully.");
  }
  #endif  
}

bool testEquality(uint16_t expected, uint16_t actual) {
  if (expected != actual) {
    Serial.print("LED test failed: expected ");
    Serial.print(expected);
    Serial.print(", actual ");
    Serial.print(actual);
    return false;
  }
  return true;
}

#endif
